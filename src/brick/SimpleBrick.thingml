import "_Timer.thingml"
import "Display.thingml"
import "Sound.thingml"
import "Controller.thingml"

thing SimpleBrick includes TimerMsgs, DisplayMsgs, SoundMsgs, ControllerMsgs, IAControllerMsg {
	message lostBall();
	message nextLevel();

	required port clock {
		sends timer_start, timer_cancel
		receives timer_timeout
	}

	required port display
	@sync_send "true"
	{
		receives displayReady, displayError
		sends create, fillRect, drawRect, clear, setColor, setBGColor, drawInteger, update
	}

	required port sound
	@sync_send "true"
	{
		sends beep
	}

	required port controller {
		receives position
	}

	provided port ia
	{
		sends updateIA , lostBall, hitBall
	}

	internal port game {
		sends lostBall, nextLevel
		receives lostBall, nextLevel
	}

	// Size of the real display
	readonly property XDISPSIZE : UInt8 = 160
	readonly property YDISPSIZE : UInt8 = 128

	// Virtual size of the "game area"
	readonly property SCALE : Int16 = 64
	readonly property XMAX 	: Int16 = XDISPSIZE * SCALE
	readonly property YMAX 	: Int16 = YDISPSIZE * SCALE

	// Walls around the play area
	property TOP 	: Int16 = 14 * SCALE 		// Leave 12 pixels on the top for scores
	property BOTTOM	: Int16 = YMAX + 8 * SCALE	// The bottom wall is off the screen
	property LEFT	: Int16 = 1 * SCALE			// One pixel for the left wall
	property RIGHT	: Int16 = XMAX - 1 * SCALE	// One pixel for the right wall

	// Ball variables
	property br : Int16 = 3 * SCALE 			// Radius of the ball
	property bx : Int16 = XMAX / 2				// Center of the ball
	property by : Int16 = YMAX					// Center of the ball
	property dx : Int16 = XMAX / 98				// Horizontal speed of the ball
	property dy : Int16 = -XMAX / 65			// Vertical speed of the ball

	// Pad variables
	property padx 	: Int16 = YMAX / 2			// Middle of the pad
	property pady 	: Int16 = YMAX - 6 * SCALE	// Top of the pad
	property padlen : Int16 = 25 * SCALE		// Length of the pad (should be a multiple of SCALE)

	// Variables used by the drawBall function to erase the previous ball
	property prevBX	: Int16 = -1
	property prevBY	: Int16 = -1

	property bgcolor : UInt8[3]
	property fgcolor : UInt8[3]
	function initColors() do
		bgcolor[0] = 53 	bgcolor[1] = 40 	bgcolor[2] = 120
		fgcolor[0] = 107 	fgcolor[1] = 94 	fgcolor[2] = 174
		display!setBGColor(bgcolor[0],bgcolor[1],bgcolor[2])
		display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
	end

	function resetBall() do
		bx = padx - br/SCALE
		by = pady - br/SCALE
		dx = XMAX / 98
		dy = -XMAX / 65
		prevBX = -1
		prevBY = -1
	end

	function eraseBall() do
		var bs : UInt8 = (br*2)/SCALE 	// Size of the ball on the actual display

		if (prevBX > 0) do				// Erase the previous ball
			display!setColor(bgcolor[0],bgcolor[1],bgcolor[2])
			display!fillRect(prevBX, prevBY, bs, bs)
		end

		prevBX = -1
		prevBY = -1
	end

	function drawBall() do
		var bs : UInt8 = (br*2)/SCALE 	// Size of the ball on the actual display

		eraseBall()

		// Compute new position of the ball on the actual display
		prevBX = (bx-br)/SCALE
		prevBY = (by-br)/SCALE

		//display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
		display!setColor(183, 199, 111)
		display!fillRect(prevBX, prevBY, bs, bs)
	end


	// Variables used by the drawPad function to erase the previous pad
	property prevPX	: Int16 = -1
	property prevPY	: Int16 = -1

	function erasePad() do
		var ps : UInt8 = padlen/SCALE 	// Size of the pad on the actual display

		if (prevPX > 0) do				// Erase the previous ball
			display!setColor(bgcolor[0],bgcolor[1],bgcolor[2])
			display!fillRect(prevPX, prevPY, ps, 4)
		end
	end

	function drawPad() do
		var ps : UInt8 = padlen/SCALE 	// Size of the pad on the actual display

		erasePad()

		prevPX = (padx - (padlen/2)) / SCALE
		prevPY = pady / SCALE

		display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
		display!fillRect(prevPX, prevPY, ps, 4)
	end

	function drawCountDown(c : UInt8) do
		display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
		if (c > 0) do
			display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
			display!setBGColor(bgcolor[0],bgcolor[1],bgcolor[2])
			display!drawInteger(80-6, 90, c, 1, 4)
		end
		else do
			display!setColor(bgcolor[0],bgcolor[1],bgcolor[2])
			display!fillRect(80-6, 90, 12, 20)
		end
	end

	function drawWalls() do
		display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
		display!fillRect(LEFT/SCALE-1, TOP/SCALE-1, (RIGHT-LEFT)/SCALE+1, 1)
		display!fillRect(LEFT/SCALE-1, BOTTOM/SCALE, (RIGHT-LEFT)/SCALE+1, 1)
		display!fillRect(LEFT/SCALE-1, TOP/SCALE, 1, (BOTTOM-TOP)/SCALE)
		display!fillRect(RIGHT/SCALE, TOP/SCALE, 1, (BOTTOM-TOP)/SCALE)
	end

	// Bricks variable
	readonly property BRICK_ROWS : UInt8 = 5
	readonly property BRICK_HEIGHT : UInt8 = 9
	property bricks : UInt8[BRICK_ROWS]

	function bitIsSet(variable : UInt8, bit : UInt8) : Boolean return '((1 << '& bit &') & '& variable &') != 0'
	function setBit(variable : UInt8, bit : UInt8) : UInt8 return ''&variable&' | (1 << '& bit &')'
	function unsetBit(variable : UInt8, bit : UInt8) : UInt8 return ''&variable&' & ~(1 << '& bit &')'

	function createBricks() do
		var y : Int8 = 0
		while (y<BRICK_ROWS) do
			bricks[y] = '0xFF'
			// Draw the Bricks
			var x : Int8 = 0
			while(x < 8) do
				if ( bitIsSet(bricks[y], x) ) do
					drawBrick(x, y)
				end
				x = x + 1
			end
			y = y + 1
		end
	end

	function bricksLeft() : UInt8 do
		var result : UInt8 = 0
		var y : Int8 = 0
		while (y<BRICK_ROWS) do
			var x : Int8 = 0
			while(x < 8) do
				if ( bitIsSet(bricks[y], x) ) do
					result = result + 1
				end
				x = x + 1
			end
			y = y + 1
		end
		return result
	end

	function drawBrick(x : UInt8, y: UInt8) do
		var bx : Int16 = LEFT + ((RIGHT-LEFT)/8) * x
		var by : Int16 = TOP + 20 * SCALE + BRICK_HEIGHT * y * SCALE
		display!setColor(155,103,89)
		display!fillRect(bx/SCALE+1, by/SCALE+1, ((RIGHT-LEFT)/8)/SCALE-2, BRICK_HEIGHT-2)
		display!setColor(100,56,43)
		display!drawRect(bx/SCALE+1, by/SCALE+1, ((RIGHT-LEFT)/8)/SCALE-2, BRICK_HEIGHT-2)
	end

	function removeBrick(x : UInt8, y: UInt8) do
		var bx : Int16 = LEFT + ((RIGHT-LEFT)/8) * x
		var by : Int16 = TOP + 20 * SCALE + BRICK_HEIGHT * y * SCALE
		display!setColor(bgcolor[0],bgcolor[1],bgcolor[2])
		display!fillRect(bx/SCALE+1, by/SCALE+1, ((RIGHT-LEFT)/8)/SCALE-2, BRICK_HEIGHT-2)
		bricks[y] = unsetBit(bricks[y], x)
	end

	function collideBrick(xpos : Int16, ypos : Int16) : Boolean do
		var bry : Int8 = (ypos - TOP - 20*SCALE) / (BRICK_HEIGHT*SCALE)
		var result : Boolean = false
		if (bry >= 0 and bry < BRICK_ROWS) do // There may be a collision
			var brx : Int8 = (xpos - LEFT) / ((RIGHT - LEFT) / 8)
			if (bitIsSet(bricks[bry], brx)) do // There is a brick
				removeBrick(brx, bry)
				result = true
			end
		end
		return result
	end

	property score : Int16 = 0
	property lives : UInt8 = 3
	property level : UInt8 = 1

	function drawScore() do
		display!setColor(158,209,130)
		display!drawInteger(98, 2, score, 5, 2)
	end

	function drawLevel() do
		display!setColor(158,209,130)
		display!drawInteger(70, 2, level, 2, 2)
	end

	function drawLives() do
		// erase all existing ball
		display!setColor(bgcolor[0],bgcolor[1],bgcolor[2])
		display!fillRect(22,4,36, 6)
		display!setColor(183, 199, 111)
		var i : UInt8 = 0
		while(i<lives) do
			display!fillRect(22 + i*15,4,6, 6)
			i = i + 1
		end

	end


	statechart SC init INIT {

		internal event e : controller?position action do
			// Map the controller values [-100..100] to the pad position
			var center : Int32 = (RIGHT - LEFT - padlen)
			center = e.x * center
			center = center / 200
			padx = LEFT + center + (RIGHT - LEFT) / 2
		end

		state INIT {

			on entry display!create(XDISPSIZE, YDISPSIZE)

			transition -> LAUNCH event display?displayReady action do
				display!clear()
				initColors()
				display!setColor(bgcolor[0],bgcolor[1],bgcolor[2])
				display!fillRect(0,0,XDISPSIZE, YDISPSIZE)
				display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
				display!fillRect(0,0,XDISPSIZE, 1)
				display!fillRect(0,0,18, 14)
				display!fillRect(90-28,0,28, 14)
				display!fillRect(XDISPSIZE-18,0,18, 14)
				drawWalls()
				createBricks()
			end
		}

		state LAUNCH {
			property countdown : Int8

			on entry do
				clock!timer_start(0, 33)
				countdown = 30*3 // 3sec
				drawScore()
				drawLevel()
				drawLives()
				display!update()
			end

			internal event t : clock?timer_timeout
			guard t.id == 0 and countdown > 0 action do
				clock!timer_start(0, 33)
				drawPad() // Draw the Pad
				if (countdown % 30 == 0) do
					drawCountDown(countdown/30)
					sound!beep()
				end
				countdown = countdown - 1
				display!update()
			end

			transition -> PLAY  event t : clock?timer_timeout
			guard t.id == 0 and countdown == 0 action do
				drawCountDown(0)
				sound!beep()
				resetBall()
				display!update()
			end
		}

		state PLAY {

	  on entry do
        clock!timer_start(0, 33)
      end
			//transition -> PLAY event t : clock?timer_timeout guard t.id == 1 action do
      internal event t : clock?timer_timeout guard t.id == 0 action do

				// Calculate the position of the new ball
				bx = bx + dx
				by = by + dy

				var wl : UInt16 = LEFT + br
				var wr : UInt16 = RIGHT - br
				var wt : UInt16 = TOP + br
				var wb : UInt16 = BOTTOM - br

				// Check for collisions with the walls
				if (bx < wl) 		do	dx = -dx 	bx = 2*wl-bx	end
				else if (bx > wr)	do	dx = -dx	bx = 2*wr-bx	end
				if (by < wt)		do	dy = -dy	by = 2*wt-by	end
				else if (by > wb)	do
					game!lostBall()
					//ia!lostBall()
				end

				// check for collision with the pad
				if (dy > 0) do // the ball has to be going down
					if (by > pady-br and by < pady+br ) do // Collision on the Y axis
						if (bx > padx-padlen/2 and bx < padx+padlen/2) do // Collision on the X axis
							dy = -dy 					// Bounce on the pad
							by = 2*(pady-br)-by			// Adjust the position of the ball
							dx = dx/4 + (bx-padx)/4		// Adjust horizontal speed
							//ia!hitBall()
						end
					end
				end

				// check collisions on bricks with the 4 corners of the ball
				var collision : Boolean = collideBrick(bx-br, by-br) or collideBrick(bx+br, by-br) or
											collideBrick(bx+br, by+br) or collideBrick(bx-br, by+br)

				if (collision) do
					dy = -dy // Update the direction of the ball
					score = score + 10 // Increment score
					drawScore()
					sound!beep()
					if (bricksLeft() == 0) game!nextLevel()
				end

				drawBall() // Draw the Ball
				drawPad() // Draw the Pad
				ia!updateIA(bx, by, padx, pady)
				display!update()

        		clock!timer_start(0, 33)
			end

			transition -> LOSTBALL event game?lostBall action clock!timer_cancel(0)
			transition -> NEXTLEVEL event game?nextLevel action clock!timer_cancel(0)
		}

		state LOSTBALL {

			on entry do
				clock!timer_start(0, 1000)
				lives = lives - 1
				eraseBall()
				erasePad()
				drawLives()
				display!update()
			end

			transition -> LAUNCH event t : clock?timer_timeout
			guard t.id == 0 and lives > 0

			transition -> GAMEOVER event t : clock?timer_timeout
			guard t.id == 0 and lives == 0
		}

		state NEXTLEVEL {

			on entry do
				clock!timer_start(0, 1000)
				level = level + 1
				drawLevel()
				eraseBall()
				erasePad()
				if (padlen > 5 * SCALE) padlen = padlen - (2 * SCALE) //TODO: reduce padlen for odd levels and accelerate game for even level
				drawLives()
				createBricks()
				display!update()
			end

			transition -> LAUNCH event t : clock?timer_timeout guard t.id == 0

		}

		state GAMEOVER {

			on entry do
				clock!timer_start(0, 500)
				lives = lives - 1
				eraseBall()
				erasePad()
				display!setColor(255,255,255)
				display!drawRect(10, 46, 140, 50)
				display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
				display!fillRect(11, 47, 138, 48)
				display!setBGColor(fgcolor[0],fgcolor[1],fgcolor[2])
				display!setColor(158,209,130)
				display!drawInteger(23, 56, score, 5, 6)
				display!update()
			end

		}

	}
}
