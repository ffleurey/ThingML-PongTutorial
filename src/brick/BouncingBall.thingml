import "_Timer.thingml"
import "Display.thingml" 

thing BouncingBall includes TimerMsgs, DisplayMsgs {
	
	readonly property XSIZE : UInt8 = 160
	readonly property YSIZE : UInt8 = 128
	
	required port clock {
		sends timer_start, timer_cancel
		receives timer_timeout
	}

	required port display {
		receives displayReady, displayError
		sends create, fillRect, drawRect, clear, setColor, update
	}
	
	readonly property MAX : Int16 = 10000
	
	property bx : Int16 = MAX/2
	property by : Int16 = MAX/2
	// The speed of the ball is within 
	property dx : Int16 = 200
	property dy : Int16 = 130

	function getBallX(bx : UInt16) : UInt8 do
		var l : Long = bx 
		l = l * (XSIZE-8)
		l = l / (MAX+1) + 4
		return l as UInt8
	end
	
	function getBallY(by : UInt16) : UInt8 do
		var l : Long = by 
		l = l * (YSIZE-8)
		l = l / (MAX+1) + 4
		return l as UInt8
	end
	
	statechart SC init INIT {
		
		property lastX : UInt8 = 200
		property lastY : UInt8 = 200
		
		state INIT {
			on entry display!create(XSIZE, YSIZE)
			transition -> BOUNCE event display?displayReady action do
				display!clear()
				display!setColor(255,255,255)
				display!drawRect(0,0,XSIZE-1, YSIZE-1)
			end
		}
		
		state BOUNCE {

			on entry clock!timer_start(0, 33)
				
			transition -> BOUNCE event t : clock?timer_timeout guard t.id == 0 action do
				// Calculate the position of the new ball
				bx = bx + dx
				by = by + dy
				
				// Check for collisions
				if (bx < 0) 		do	dx = -dx 	bx = -bx			end
				else if (bx > MAX)	do	dx = -dx	bx = 2*MAX-bx		end
				if (by < 0)			do	dy = -dy	by = -by			end
				else if (by > MAX)	do	dy = -dy	by = 2*MAX-by		end
				
				// Calculate the position on the screen
				var newX : UInt8 = getBallX(bx)
				var newY : UInt8 = getBallY(by)
		
				// clear the previous ball
				display!setColor(0,0,0)
				display!fillRect(lastX-3, lastY-3, 6, 6)
				// Draw the new ball
				display!setColor(255,255,255)
				display!fillRect(newX-2, newY-3, 4, 6)
				display!fillRect(newX-3, newY-2, 6, 4)
				
				display!update()
				
				lastX = newX
				lastY = newY
			end
					
		}
	}
}