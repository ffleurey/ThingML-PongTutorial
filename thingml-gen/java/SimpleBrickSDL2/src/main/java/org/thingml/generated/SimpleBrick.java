/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : SimpleBrick
 **/
public class SimpleBrick extends Component implements ISimpleBrick_clock, ISimpleBrick_display, ISimpleBrick_controller {

private List<AttributeListener> attListener = new ArrayList<AttributeListener>();
public void addAttributeListener(AttributeListener listener){
this.attListener.add(listener);
}

public void removeAttributeListener(AttributeListener listener){
this.attListener.remove(listener);
}

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
@Override
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tXDISPSIZE = " + SimpleBrick_XDISPSIZE_var;
result += "\tYDISPSIZE = " + SimpleBrick_YDISPSIZE_var;
result += "\tSCALE = " + SimpleBrick_SCALE_var;
result += "\tXMAX = " + SimpleBrick_XMAX_var;
result += "\tYMAX = " + SimpleBrick_YMAX_var;
result += "\tTOP = " + SimpleBrick_TOP_var;
result += "\tBOTTOM = " + SimpleBrick_BOTTOM_var;
result += "\tLEFT = " + SimpleBrick_LEFT_var;
result += "\tRIGHT = " + SimpleBrick_RIGHT_var;
result += "\tbr = " + SimpleBrick_br_var;
result += "\tbx = " + SimpleBrick_bx_var;
result += "\tby = " + SimpleBrick_by_var;
result += "\tdx = " + SimpleBrick_dx_var;
result += "\tdy = " + SimpleBrick_dy_var;
result += "\tpadx = " + SimpleBrick_padx_var;
result += "\tpady = " + SimpleBrick_pady_var;
result += "\tpadlen = " + SimpleBrick_padlen_var;
result += "\tprevBX = " + SimpleBrick_prevBX_var;
result += "\tprevBY = " + SimpleBrick_prevBY_var;
result += "\tprevPX = " + SimpleBrick_prevPX_var;
result += "\tprevPY = " + SimpleBrick_prevPY_var;
result += "\tBRICK_ROWS = " + SimpleBrick_BRICK_ROWS_var;
result += "\tBRICK_HEIGHT = " + SimpleBrick_BRICK_HEIGHT_var;
result += "\tbricks = " + SimpleBrick_bricks_var;
result += "";
return result;
}

private Collection<ISimpleBrick_clockClient> clock_clients = Collections.synchronizedCollection(new LinkedList<ISimpleBrick_clockClient>());
public synchronized void registerOnClock(ISimpleBrick_clockClient client){
clock_clients.add(client);
}

public synchronized void unregisterFromClock(ISimpleBrick_clockClient client){
clock_clients.remove(client);
}

private Collection<ISimpleBrick_displayClient> display_clients = Collections.synchronizedCollection(new LinkedList<ISimpleBrick_displayClient>());
public synchronized void registerOnDisplay(ISimpleBrick_displayClient client){
display_clients.add(client);
}

public synchronized void unregisterFromDisplay(ISimpleBrick_displayClient client){
display_clients.remove(client);
}

@Override
public synchronized void timer_timeout_via_clock(int TimerMsgs_timer_timeout_id_var){
receive(timer_timeoutType.instantiate(TimerMsgs_timer_timeout_id_var), clock_port);
}

@Override
public synchronized void displayReady_via_display(){
receive(displayReadyType.instantiate(), display_port);
}

@Override
public synchronized void displayError_via_display(){
receive(displayErrorType.instantiate(), display_port);
}

@Override
public synchronized void position_via_controller(int ControllerMsgs_position_x_var, int ControllerMsgs_position_y_var){
receive(positionType.instantiate(ControllerMsgs_position_x_var, ControllerMsgs_position_y_var), controller_port);
}

private void sendTimer_start_via_clock(int TimerMsgs_timer_start_id_var, int TimerMsgs_timer_start_time_var){
//ThingML send
clock_port.send(timer_startType.instantiate(TimerMsgs_timer_start_id_var, TimerMsgs_timer_start_time_var));
//send to other clients
for(ISimpleBrick_clockClient client : clock_clients){
client.timer_start_from_clock(TimerMsgs_timer_start_id_var, TimerMsgs_timer_start_time_var);
}}

private void sendTimer_cancel_via_clock(int TimerMsgs_timer_cancel_id_var){
//ThingML send
clock_port.send(timer_cancelType.instantiate(TimerMsgs_timer_cancel_id_var));
//send to other clients
for(ISimpleBrick_clockClient client : clock_clients){
client.timer_cancel_from_clock(TimerMsgs_timer_cancel_id_var);
}}

private void sendCreate_via_display(int DisplayMsgs_create_xsize_var, int DisplayMsgs_create_ysize_var){
//ThingML send
display_port.send(createType.instantiate(DisplayMsgs_create_xsize_var, DisplayMsgs_create_ysize_var));
//send to other clients
for(ISimpleBrick_displayClient client : display_clients){
client.create_from_display(DisplayMsgs_create_xsize_var, DisplayMsgs_create_ysize_var);
}}

private void sendFillRect_via_display(int DisplayMsgs_fillRect_x_var, int DisplayMsgs_fillRect_y_var, int DisplayMsgs_fillRect_width_var, int DisplayMsgs_fillRect_height_var){
//ThingML send
display_port.send(fillRectType.instantiate(DisplayMsgs_fillRect_x_var, DisplayMsgs_fillRect_y_var, DisplayMsgs_fillRect_width_var, DisplayMsgs_fillRect_height_var));
//send to other clients
for(ISimpleBrick_displayClient client : display_clients){
client.fillRect_from_display(DisplayMsgs_fillRect_x_var, DisplayMsgs_fillRect_y_var, DisplayMsgs_fillRect_width_var, DisplayMsgs_fillRect_height_var);
}}

private void sendDrawRect_via_display(int DisplayMsgs_drawRect_x_var, int DisplayMsgs_drawRect_y_var, int DisplayMsgs_drawRect_width_var, int DisplayMsgs_drawRect_height_var){
//ThingML send
display_port.send(drawRectType.instantiate(DisplayMsgs_drawRect_x_var, DisplayMsgs_drawRect_y_var, DisplayMsgs_drawRect_width_var, DisplayMsgs_drawRect_height_var));
//send to other clients
for(ISimpleBrick_displayClient client : display_clients){
client.drawRect_from_display(DisplayMsgs_drawRect_x_var, DisplayMsgs_drawRect_y_var, DisplayMsgs_drawRect_width_var, DisplayMsgs_drawRect_height_var);
}}

private void sendClear_via_display(){
//ThingML send
display_port.send(clearType.instantiate());
//send to other clients
for(ISimpleBrick_displayClient client : display_clients){
client.clear_from_display();
}}

private void sendSetColor_via_display(int DisplayMsgs_setColor_r_var, int DisplayMsgs_setColor_g_var, int DisplayMsgs_setColor_b_var){
//ThingML send
display_port.send(setColorType.instantiate(DisplayMsgs_setColor_r_var, DisplayMsgs_setColor_g_var, DisplayMsgs_setColor_b_var));
//send to other clients
for(ISimpleBrick_displayClient client : display_clients){
client.setColor_from_display(DisplayMsgs_setColor_r_var, DisplayMsgs_setColor_g_var, DisplayMsgs_setColor_b_var);
}}

private void sendUpdate_via_display(){
//ThingML send
display_port.send(updateType.instantiate());
//send to other clients
for(ISimpleBrick_displayClient client : display_clients){
client.update_from_display();
}}

//Attributes
private final int SimpleBrick_YDISPSIZE_var;
private int SimpleBrick_BOTTOM_var;
private int SimpleBrick_by_var;
private final int SimpleBrick_YMAX_var;
private final int SimpleBrick_BRICK_HEIGHT_var;
private int SimpleBrick_padx_var;
private int SimpleBrick_LEFT_var;
private int SimpleBrick_bx_var;
private int SimpleBrick_dx_var;
private int SimpleBrick_prevBY_var;
private final int SimpleBrick_XDISPSIZE_var;
private int SimpleBrick_padlen_var;
private int SimpleBrick_RIGHT_var;
private int SimpleBrick_prevBX_var;
private int[] SimpleBrick_bricks_var;
private final int SimpleBrick_XMAX_var;
private final int SimpleBrick_BRICK_ROWS_var;
private int SimpleBrick_prevPX_var;
private int SimpleBrick_prevPY_var;
private int SimpleBrick_br_var;
private final int SimpleBrick_SCALE_var;
private int SimpleBrick_pady_var;
private int SimpleBrick_TOP_var;
private int SimpleBrick_dy_var;
private int debug_SimpleBrick_YDISPSIZE_var;
private int debug_SimpleBrick_BOTTOM_var;
private int debug_SimpleBrick_by_var;
private int debug_SimpleBrick_YMAX_var;
private int debug_SimpleBrick_BRICK_HEIGHT_var;
private int debug_SimpleBrick_padx_var;
private int debug_SimpleBrick_LEFT_var;
private int debug_SimpleBrick_bx_var;
private int debug_SimpleBrick_dx_var;
private int debug_SimpleBrick_prevBY_var;
private int debug_SimpleBrick_XDISPSIZE_var;
private int debug_SimpleBrick_padlen_var;
private int debug_SimpleBrick_RIGHT_var;
private int debug_SimpleBrick_prevBX_var;
private int[] debug_SimpleBrick_bricks_var;
private int debug_SimpleBrick_XMAX_var;
private int debug_SimpleBrick_BRICK_ROWS_var;
private int debug_SimpleBrick_prevPX_var;
private int debug_SimpleBrick_prevPY_var;
private int debug_SimpleBrick_br_var;
private int debug_SimpleBrick_SCALE_var;
private int debug_SimpleBrick_pady_var;
private int debug_SimpleBrick_TOP_var;
private int debug_SimpleBrick_dy_var;
//Ports
private Port clock_port;
private Port display_port;
private Port controller_port;
//Message types
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
public Timer_startMessageType getTimer_startType(){
return timer_startType;
}

protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
public Timer_cancelMessageType getTimer_cancelType(){
return timer_cancelType;
}

protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
public Timer_timeoutMessageType getTimer_timeoutType(){
return timer_timeoutType;
}

protected final ClearMessageType clearType = new ClearMessageType();
public ClearMessageType getClearType(){
return clearType;
}

protected final SetColorMessageType setColorType = new SetColorMessageType();
public SetColorMessageType getSetColorType(){
return setColorType;
}

protected final DrawRectMessageType drawRectType = new DrawRectMessageType();
public DrawRectMessageType getDrawRectType(){
return drawRectType;
}

protected final FillRectMessageType fillRectType = new FillRectMessageType();
public FillRectMessageType getFillRectType(){
return fillRectType;
}

protected final CreateMessageType createType = new CreateMessageType();
public CreateMessageType getCreateType(){
return createType;
}

protected final DestroyMessageType destroyType = new DestroyMessageType();
public DestroyMessageType getDestroyType(){
return destroyType;
}

protected final UpdateMessageType updateType = new UpdateMessageType();
public UpdateMessageType getUpdateType(){
return updateType;
}

protected final DisplayReadyMessageType displayReadyType = new DisplayReadyMessageType();
public DisplayReadyMessageType getDisplayReadyType(){
return displayReadyType;
}

protected final DisplayErrorMessageType displayErrorType = new DisplayErrorMessageType();
public DisplayErrorMessageType getDisplayErrorType(){
return displayErrorType;
}

protected final VelocityMessageType velocityType = new VelocityMessageType();
public VelocityMessageType getVelocityType(){
return velocityType;
}

protected final PositionMessageType positionType = new PositionMessageType();
public PositionMessageType getPositionType(){
return positionType;
}

protected final FireMessageType fireType = new FireMessageType();
public FireMessageType getFireType(){
return fireType;
}

//Empty Constructor
public SimpleBrick() {
super();
SimpleBrick_YDISPSIZE_var = (int) 128;
SimpleBrick_BOTTOM_var = (int) getSimpleBrick_YMAX_var() + 8 * getSimpleBrick_SCALE_var();
SimpleBrick_by_var = (int) getSimpleBrick_YMAX_var() / 2;
SimpleBrick_YMAX_var = (int) getSimpleBrick_YDISPSIZE_var() * getSimpleBrick_SCALE_var();
SimpleBrick_BRICK_HEIGHT_var = (int) 9;
SimpleBrick_padx_var = (int) getSimpleBrick_YMAX_var() / 2;
SimpleBrick_LEFT_var = (int) 2 * getSimpleBrick_SCALE_var();
SimpleBrick_bx_var = (int) getSimpleBrick_XMAX_var() / 2;
SimpleBrick_dx_var = (int) getSimpleBrick_XMAX_var() / 98;
SimpleBrick_prevBY_var = (int)  -1;
SimpleBrick_XDISPSIZE_var = (int) 160;
SimpleBrick_padlen_var = (int) getSimpleBrick_XMAX_var() / 6;
SimpleBrick_RIGHT_var = (int) getSimpleBrick_XMAX_var() - 2 * getSimpleBrick_SCALE_var();
SimpleBrick_prevBX_var = (int)  -1;
SimpleBrick_XMAX_var = (int) getSimpleBrick_XDISPSIZE_var() * getSimpleBrick_SCALE_var();
SimpleBrick_BRICK_ROWS_var = (int) 5;
SimpleBrick_prevPX_var = (int)  -1;
SimpleBrick_prevPY_var = (int)  -1;
SimpleBrick_br_var = (int) 3 * getSimpleBrick_SCALE_var();
SimpleBrick_SCALE_var = (int) 64;
SimpleBrick_pady_var = (int) getSimpleBrick_YMAX_var() - 6 * getSimpleBrick_SCALE_var();
SimpleBrick_TOP_var = (int) 12 * getSimpleBrick_SCALE_var();
SimpleBrick_dy_var = (int) getSimpleBrick_XMAX_var() / 65;
}

//Constructor (only readonly (final) attributes)
public SimpleBrick(final int SimpleBrick_YDISPSIZE_var, final int SimpleBrick_YMAX_var, final int SimpleBrick_BRICK_HEIGHT_var, final int SimpleBrick_XDISPSIZE_var, final int SimpleBrick_XMAX_var, final int SimpleBrick_BRICK_ROWS_var, final int SimpleBrick_SCALE_var) {
super();
this.SimpleBrick_YDISPSIZE_var = SimpleBrick_YDISPSIZE_var;
this.SimpleBrick_YMAX_var = SimpleBrick_YMAX_var;
this.SimpleBrick_BRICK_HEIGHT_var = SimpleBrick_BRICK_HEIGHT_var;
this.SimpleBrick_XDISPSIZE_var = SimpleBrick_XDISPSIZE_var;
this.SimpleBrick_XMAX_var = SimpleBrick_XMAX_var;
this.SimpleBrick_BRICK_ROWS_var = SimpleBrick_BRICK_ROWS_var;
this.SimpleBrick_SCALE_var = SimpleBrick_SCALE_var;
}

//Constructor (all attributes)
public SimpleBrick(String name, final int SimpleBrick_YDISPSIZE_var, final int SimpleBrick_BOTTOM_var, final int SimpleBrick_by_var, final int SimpleBrick_YMAX_var, final int SimpleBrick_BRICK_HEIGHT_var, final int SimpleBrick_padx_var, final int SimpleBrick_LEFT_var, final int SimpleBrick_bx_var, final int SimpleBrick_dx_var, final int SimpleBrick_prevBY_var, final int SimpleBrick_XDISPSIZE_var, final int SimpleBrick_padlen_var, final int SimpleBrick_RIGHT_var, final int SimpleBrick_prevBX_var, final int[] SimpleBrick_bricks_var, final int SimpleBrick_XMAX_var, final int SimpleBrick_BRICK_ROWS_var, final int SimpleBrick_prevPX_var, final int SimpleBrick_prevPY_var, final int SimpleBrick_br_var, final int SimpleBrick_SCALE_var, final int SimpleBrick_pady_var, final int SimpleBrick_TOP_var, final int SimpleBrick_dy_var) {
super(name);
this.SimpleBrick_YDISPSIZE_var = SimpleBrick_YDISPSIZE_var;
this.SimpleBrick_BOTTOM_var = SimpleBrick_BOTTOM_var;
this.SimpleBrick_by_var = SimpleBrick_by_var;
this.SimpleBrick_YMAX_var = SimpleBrick_YMAX_var;
this.SimpleBrick_BRICK_HEIGHT_var = SimpleBrick_BRICK_HEIGHT_var;
this.SimpleBrick_padx_var = SimpleBrick_padx_var;
this.SimpleBrick_LEFT_var = SimpleBrick_LEFT_var;
this.SimpleBrick_bx_var = SimpleBrick_bx_var;
this.SimpleBrick_dx_var = SimpleBrick_dx_var;
this.SimpleBrick_prevBY_var = SimpleBrick_prevBY_var;
this.SimpleBrick_XDISPSIZE_var = SimpleBrick_XDISPSIZE_var;
this.SimpleBrick_padlen_var = SimpleBrick_padlen_var;
this.SimpleBrick_RIGHT_var = SimpleBrick_RIGHT_var;
this.SimpleBrick_prevBX_var = SimpleBrick_prevBX_var;
this.SimpleBrick_bricks_var = SimpleBrick_bricks_var;
this.SimpleBrick_XMAX_var = SimpleBrick_XMAX_var;
this.SimpleBrick_BRICK_ROWS_var = SimpleBrick_BRICK_ROWS_var;
this.SimpleBrick_prevPX_var = SimpleBrick_prevPX_var;
this.SimpleBrick_prevPY_var = SimpleBrick_prevPY_var;
this.SimpleBrick_br_var = SimpleBrick_br_var;
this.SimpleBrick_SCALE_var = SimpleBrick_SCALE_var;
this.SimpleBrick_pady_var = SimpleBrick_pady_var;
this.SimpleBrick_TOP_var = SimpleBrick_TOP_var;
this.SimpleBrick_dy_var = SimpleBrick_dy_var;
}

//Getters and Setters for non readonly/final attributes
public int getSimpleBrick_YDISPSIZE_var() {
return SimpleBrick_YDISPSIZE_var;
}

public int getSimpleBrick_BOTTOM_var() {
return SimpleBrick_BOTTOM_var;
}

public void setSimpleBrick_BOTTOM_var(int SimpleBrick_BOTTOM_var) {
this.SimpleBrick_BOTTOM_var = SimpleBrick_BOTTOM_var;
}

public int getSimpleBrick_by_var() {
return SimpleBrick_by_var;
}

public void setSimpleBrick_by_var(int SimpleBrick_by_var) {
this.SimpleBrick_by_var = SimpleBrick_by_var;
}

public int getSimpleBrick_YMAX_var() {
return SimpleBrick_YMAX_var;
}

public int getSimpleBrick_BRICK_HEIGHT_var() {
return SimpleBrick_BRICK_HEIGHT_var;
}

public int getSimpleBrick_padx_var() {
return SimpleBrick_padx_var;
}

public void setSimpleBrick_padx_var(int SimpleBrick_padx_var) {
this.SimpleBrick_padx_var = SimpleBrick_padx_var;
}

public int getSimpleBrick_LEFT_var() {
return SimpleBrick_LEFT_var;
}

public void setSimpleBrick_LEFT_var(int SimpleBrick_LEFT_var) {
this.SimpleBrick_LEFT_var = SimpleBrick_LEFT_var;
}

public int getSimpleBrick_bx_var() {
return SimpleBrick_bx_var;
}

public void setSimpleBrick_bx_var(int SimpleBrick_bx_var) {
this.SimpleBrick_bx_var = SimpleBrick_bx_var;
}

public int getSimpleBrick_dx_var() {
return SimpleBrick_dx_var;
}

public void setSimpleBrick_dx_var(int SimpleBrick_dx_var) {
this.SimpleBrick_dx_var = SimpleBrick_dx_var;
}

public int getSimpleBrick_prevBY_var() {
return SimpleBrick_prevBY_var;
}

public void setSimpleBrick_prevBY_var(int SimpleBrick_prevBY_var) {
this.SimpleBrick_prevBY_var = SimpleBrick_prevBY_var;
}

public int getSimpleBrick_XDISPSIZE_var() {
return SimpleBrick_XDISPSIZE_var;
}

public int getSimpleBrick_padlen_var() {
return SimpleBrick_padlen_var;
}

public void setSimpleBrick_padlen_var(int SimpleBrick_padlen_var) {
this.SimpleBrick_padlen_var = SimpleBrick_padlen_var;
}

public int getSimpleBrick_RIGHT_var() {
return SimpleBrick_RIGHT_var;
}

public void setSimpleBrick_RIGHT_var(int SimpleBrick_RIGHT_var) {
this.SimpleBrick_RIGHT_var = SimpleBrick_RIGHT_var;
}

public int getSimpleBrick_prevBX_var() {
return SimpleBrick_prevBX_var;
}

public void setSimpleBrick_prevBX_var(int SimpleBrick_prevBX_var) {
this.SimpleBrick_prevBX_var = SimpleBrick_prevBX_var;
}

public int[] getSimpleBrick_bricks_var() {
return SimpleBrick_bricks_var;
}

public void setSimpleBrick_bricks_var(int[] SimpleBrick_bricks_var) {
this.SimpleBrick_bricks_var = SimpleBrick_bricks_var;
}

public int getSimpleBrick_XMAX_var() {
return SimpleBrick_XMAX_var;
}

public int getSimpleBrick_BRICK_ROWS_var() {
return SimpleBrick_BRICK_ROWS_var;
}

public int getSimpleBrick_prevPX_var() {
return SimpleBrick_prevPX_var;
}

public void setSimpleBrick_prevPX_var(int SimpleBrick_prevPX_var) {
this.SimpleBrick_prevPX_var = SimpleBrick_prevPX_var;
}

public int getSimpleBrick_prevPY_var() {
return SimpleBrick_prevPY_var;
}

public void setSimpleBrick_prevPY_var(int SimpleBrick_prevPY_var) {
this.SimpleBrick_prevPY_var = SimpleBrick_prevPY_var;
}

public int getSimpleBrick_br_var() {
return SimpleBrick_br_var;
}

public void setSimpleBrick_br_var(int SimpleBrick_br_var) {
this.SimpleBrick_br_var = SimpleBrick_br_var;
}

public int getSimpleBrick_SCALE_var() {
return SimpleBrick_SCALE_var;
}

public int getSimpleBrick_pady_var() {
return SimpleBrick_pady_var;
}

public void setSimpleBrick_pady_var(int SimpleBrick_pady_var) {
this.SimpleBrick_pady_var = SimpleBrick_pady_var;
}

public int getSimpleBrick_TOP_var() {
return SimpleBrick_TOP_var;
}

public void setSimpleBrick_TOP_var(int SimpleBrick_TOP_var) {
this.SimpleBrick_TOP_var = SimpleBrick_TOP_var;
}

public int getSimpleBrick_dy_var() {
return SimpleBrick_dy_var;
}

public void setSimpleBrick_dy_var(int SimpleBrick_dy_var) {
this.SimpleBrick_dy_var = SimpleBrick_dy_var;
}

//Getters for Ports
public Port getClock_port() {
return clock_port;
}
public Port getDisplay_port() {
return display_port;
}
public Port getController_port() {
return controller_port;
}
private CompositeState buildSimpleBrick_SC(){
final List<AtomicState> states_SimpleBrick_SC = new ArrayList<AtomicState>();
final AtomicState state_SimpleBrick_SC_INIT = new AtomicState("INIT")
{
@Override
public void onEntry() {
sendCreate_via_display((int) (getSimpleBrick_XDISPSIZE_var()), (int) (getSimpleBrick_YDISPSIZE_var()));
}

};
states_SimpleBrick_SC.add(state_SimpleBrick_SC_INIT);
final AtomicState state_SimpleBrick_SC_PLAY = new AtomicState("PLAY")
{
@Override
public void onEntry() {
sendTimer_start_via_clock((int) (0), (int) (33));
}

};
states_SimpleBrick_SC.add(state_SimpleBrick_SC_PLAY);
final List<Region> regions_SimpleBrick_SC = new ArrayList<Region>();
final List<Handler> transitions_SimpleBrick_SC = new ArrayList<Handler>();
transitions_SimpleBrick_SC.add(new Transition("1341912487",displayReadyType, display_port, state_SimpleBrick_SC_INIT, state_SimpleBrick_SC_PLAY){
@Override
public void doExecute(final Event e) {
sendClear_via_display();
drawWalls();
createBricks();
}

});
transitions_SimpleBrick_SC.add(new InternalTransition("695551500",positionType, controller_port, state_SimpleBrick_SC_PLAY){
@Override
public void doExecute(final Event e) {
final PositionMessageType.PositionMessage position = (PositionMessageType.PositionMessage) e;
int center_var = (int) ((getSimpleBrick_RIGHT_var() - getSimpleBrick_LEFT_var()) / 2);

SimpleBrick_padx_var = (int) (getSimpleBrick_LEFT_var() + center_var + (position.x * (getSimpleBrick_RIGHT_var() - getSimpleBrick_LEFT_var() - getSimpleBrick_padlen_var())) / 200);
}

});
transitions_SimpleBrick_SC.add(new Transition("464053036",timer_timeoutType, clock_port, state_SimpleBrick_SC_PLAY, state_SimpleBrick_SC_PLAY){
@Override
public boolean doCheck(final Event e) {
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == 0;
}

@Override
public void doExecute(final Event e) {
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
drawPad();
SimpleBrick_bx_var = (int) (getSimpleBrick_bx_var() + getSimpleBrick_dx_var());
SimpleBrick_by_var = (int) (getSimpleBrick_by_var() + getSimpleBrick_dy_var());
int wl_var = (int) (getSimpleBrick_LEFT_var() + getSimpleBrick_br_var());

int wr_var = (int) (getSimpleBrick_RIGHT_var() - getSimpleBrick_br_var());

int wt_var = (int) (getSimpleBrick_TOP_var() + getSimpleBrick_br_var());

int wb_var = (int) (getSimpleBrick_BOTTOM_var() - getSimpleBrick_br_var());

if(getSimpleBrick_bx_var() < wl_var) {
SimpleBrick_dx_var = (int) ( -getSimpleBrick_dx_var());
SimpleBrick_bx_var = (int) (2 * wl_var - getSimpleBrick_bx_var());

} else {
if(getSimpleBrick_bx_var() > wr_var) {
SimpleBrick_dx_var = (int) ( -getSimpleBrick_dx_var());
SimpleBrick_bx_var = (int) (2 * wr_var - getSimpleBrick_bx_var());

}

}
if(getSimpleBrick_by_var() < wt_var) {
SimpleBrick_dy_var = (int) ( -getSimpleBrick_dy_var());
SimpleBrick_by_var = (int) (2 * wt_var - getSimpleBrick_by_var());

} else {
if(getSimpleBrick_by_var() > wb_var) {
SimpleBrick_dy_var = (int) ( -getSimpleBrick_dy_var());
SimpleBrick_by_var = (int) (2 * wb_var - getSimpleBrick_by_var());

}

}
if(getSimpleBrick_dy_var() > 0) {
if(getSimpleBrick_by_var() > getSimpleBrick_pady_var() - getSimpleBrick_br_var() && getSimpleBrick_by_var() < getSimpleBrick_pady_var() + getSimpleBrick_br_var()) {
if(getSimpleBrick_bx_var() > getSimpleBrick_padx_var() - getSimpleBrick_padlen_var() / 2 && getSimpleBrick_bx_var() < getSimpleBrick_padx_var() + getSimpleBrick_padlen_var() / 2) {
SimpleBrick_dy_var = (int) ( -getSimpleBrick_dy_var());
SimpleBrick_by_var = (int) (2 * (getSimpleBrick_pady_var() - getSimpleBrick_br_var()) - getSimpleBrick_by_var());
SimpleBrick_dx_var = (int) (getSimpleBrick_dx_var() / 4 + (getSimpleBrick_bx_var() - getSimpleBrick_padx_var()) / 4);

}

}

}
boolean collision_var = (boolean) (collideBrick((int) (getSimpleBrick_bx_var() - getSimpleBrick_br_var()), (int) (getSimpleBrick_by_var() - getSimpleBrick_br_var())) || collideBrick((int) (getSimpleBrick_bx_var() + getSimpleBrick_br_var()), (int) (getSimpleBrick_by_var() - getSimpleBrick_br_var())) || collideBrick((int) (getSimpleBrick_bx_var() + getSimpleBrick_br_var()), (int) (getSimpleBrick_by_var() + getSimpleBrick_br_var())) || collideBrick((int) (getSimpleBrick_bx_var() - getSimpleBrick_br_var()), (int) (getSimpleBrick_by_var() + getSimpleBrick_br_var())));

if(collision_var) {
SimpleBrick_dy_var = (int) ( -getSimpleBrick_dy_var());

}
drawBall();
sendUpdate_via_display();
}

});
final CompositeState state_SimpleBrick_SC = new CompositeState("SC", states_SimpleBrick_SC, state_SimpleBrick_SC_INIT, transitions_SimpleBrick_SC, regions_SimpleBrick_SC, false);
return state_SimpleBrick_SC;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
clock_port = new Port(PortType.REQUIRED, "clock", this);
display_port = new Port(PortType.REQUIRED, "display", this);
controller_port = new Port(PortType.REQUIRED, "controller", this);
} else {
clock_port = ((SimpleBrick)root).clock_port;
display_port = ((SimpleBrick)root).display_port;
controller_port = ((SimpleBrick)root).controller_port;
}
createCepStreams();if (session == null){
//Init state machine
behavior = buildSimpleBrick_SC();
}
return this;
}

private void drawBall() {
int bs_var = (int) ((getSimpleBrick_br_var() * 2) / getSimpleBrick_SCALE_var());

if(getSimpleBrick_prevBX_var() > 0) {
sendSetColor_via_display((int) (0), (int) (0), (int) (0));
sendFillRect_via_display((int) (getSimpleBrick_prevBX_var()), (int) (getSimpleBrick_prevBY_var()), (int) (bs_var), (int) (bs_var));

}
SimpleBrick_prevBX_var = (int) ((getSimpleBrick_bx_var() - getSimpleBrick_br_var()) / getSimpleBrick_SCALE_var());
SimpleBrick_prevBY_var = (int) ((getSimpleBrick_by_var() - getSimpleBrick_br_var()) / getSimpleBrick_SCALE_var());
sendSetColor_via_display((int) (255), (int) (255), (int) (255));
sendFillRect_via_display((int) (getSimpleBrick_prevBX_var()), (int) (getSimpleBrick_prevBY_var()), (int) (bs_var), (int) (bs_var));
}
private void drawPad() {
int ps_var = (int) (getSimpleBrick_padlen_var() / getSimpleBrick_SCALE_var());

if(getSimpleBrick_prevPX_var() > 0) {
sendSetColor_via_display((int) (0), (int) (0), (int) (0));
sendFillRect_via_display((int) (getSimpleBrick_prevPX_var()), (int) (getSimpleBrick_prevPY_var()), (int) (ps_var), (int) (4));

}
SimpleBrick_prevPX_var = (int) ((getSimpleBrick_padx_var() - (getSimpleBrick_padlen_var() / 2)) / getSimpleBrick_SCALE_var());
SimpleBrick_prevPY_var = (int) (getSimpleBrick_pady_var() / getSimpleBrick_SCALE_var());
sendSetColor_via_display((int) (255), (int) (255), (int) (255));
sendFillRect_via_display((int) (getSimpleBrick_prevPX_var()), (int) (getSimpleBrick_prevPY_var()), (int) (ps_var), (int) (4));
}
private void drawWalls() {
sendSetColor_via_display((int) (255), (int) (255), (int) (255));
sendFillRect_via_display((int) (getSimpleBrick_LEFT_var() / getSimpleBrick_SCALE_var() - 1), (int) (getSimpleBrick_TOP_var() / getSimpleBrick_SCALE_var() - 1), (int) ((getSimpleBrick_RIGHT_var() - getSimpleBrick_LEFT_var()) / getSimpleBrick_SCALE_var() + 1), (int) (1));
sendFillRect_via_display((int) (getSimpleBrick_LEFT_var() / getSimpleBrick_SCALE_var() - 1), (int) (getSimpleBrick_BOTTOM_var() / getSimpleBrick_SCALE_var() - 1), (int) ((getSimpleBrick_RIGHT_var() - getSimpleBrick_LEFT_var()) / getSimpleBrick_SCALE_var() + 1), (int) (1));
sendFillRect_via_display((int) (getSimpleBrick_LEFT_var() / getSimpleBrick_SCALE_var() - 1), (int) (getSimpleBrick_TOP_var() / getSimpleBrick_SCALE_var()), (int) (1), (int) ((getSimpleBrick_BOTTOM_var() - getSimpleBrick_TOP_var()) / getSimpleBrick_SCALE_var()));
sendFillRect_via_display((int) (getSimpleBrick_RIGHT_var() / getSimpleBrick_SCALE_var() - 1), (int) (getSimpleBrick_TOP_var() / getSimpleBrick_SCALE_var()), (int) (1), (int) ((getSimpleBrick_BOTTOM_var() - getSimpleBrick_TOP_var()) / getSimpleBrick_SCALE_var()));
}
private boolean bitIsSet(final int SimpleBrick_bitIsSet_variable_var, final int SimpleBrick_bitIsSet_bit_var) {
return (boolean) (((1 << SimpleBrick_bitIsSet_bit_var) & SimpleBrick_bitIsSet_variable_var) != 0);
}
private int setBit(final int SimpleBrick_setBit_variable_var, final int SimpleBrick_setBit_bit_var) {
return (int) (SimpleBrick_setBit_variable_var | (1 << SimpleBrick_setBit_bit_var));
}
private int unsetBit(final int SimpleBrick_unsetBit_variable_var, final int SimpleBrick_unsetBit_bit_var) {
return (int) (SimpleBrick_unsetBit_variable_var & ~(1 << SimpleBrick_unsetBit_bit_var));
}
private void createBricks() {
int y_var = (int) (0);

while(y_var < getSimpleBrick_BRICK_ROWS_var()) {
SimpleBrick_bricks_var[y_var] = (int) (0xFF);
int x_var = (int) (0);

while(x_var < 8) {
if(bitIsSet((int) (SimpleBrick_bricks_var[y_var]
), (int) (x_var))) {
drawBrick((int) (x_var), (int) (y_var));

}
x_var = (int) (x_var + 1);

}
y_var = (int) (y_var + 1);

}
}
private void drawBrick(final int SimpleBrick_drawBrick_x_var, final int SimpleBrick_drawBrick_y_var) {
int bx_var = (int) (getSimpleBrick_LEFT_var() + ((getSimpleBrick_RIGHT_var() - getSimpleBrick_LEFT_var()) / 8) * SimpleBrick_drawBrick_x_var);

int by_var = (int) (getSimpleBrick_TOP_var() + 20 * getSimpleBrick_SCALE_var() + getSimpleBrick_BRICK_HEIGHT_var() * SimpleBrick_drawBrick_y_var * getSimpleBrick_SCALE_var());

sendSetColor_via_display((int) (100), (int) (100), (int) (100));
sendFillRect_via_display((int) (bx_var / getSimpleBrick_SCALE_var() + 1), (int) (by_var / getSimpleBrick_SCALE_var() + 1), (int) (((getSimpleBrick_RIGHT_var() - getSimpleBrick_LEFT_var()) / 8) / getSimpleBrick_SCALE_var() - 2), (int) (getSimpleBrick_BRICK_HEIGHT_var() - 2));
sendSetColor_via_display((int) (200), (int) (200), (int) (200));
sendDrawRect_via_display((int) (bx_var / getSimpleBrick_SCALE_var() + 1), (int) (by_var / getSimpleBrick_SCALE_var() + 1), (int) (((getSimpleBrick_RIGHT_var() - getSimpleBrick_LEFT_var()) / 8) / getSimpleBrick_SCALE_var() - 2), (int) (getSimpleBrick_BRICK_HEIGHT_var() - 2));
}
private void removeBrick(final int SimpleBrick_removeBrick_x_var, final int SimpleBrick_removeBrick_y_var) {
int bx_var = (int) (getSimpleBrick_LEFT_var() + ((getSimpleBrick_RIGHT_var() - getSimpleBrick_LEFT_var()) / 8) * SimpleBrick_removeBrick_x_var);

int by_var = (int) (getSimpleBrick_TOP_var() + 20 * getSimpleBrick_SCALE_var() + getSimpleBrick_BRICK_HEIGHT_var() * SimpleBrick_removeBrick_y_var * getSimpleBrick_SCALE_var());

sendSetColor_via_display((int) (0), (int) (0), (int) (0));
sendFillRect_via_display((int) (bx_var / getSimpleBrick_SCALE_var() + 1), (int) (by_var / getSimpleBrick_SCALE_var() + 1), (int) (((getSimpleBrick_RIGHT_var() - getSimpleBrick_LEFT_var()) / 8) / getSimpleBrick_SCALE_var() - 2), (int) (getSimpleBrick_BRICK_HEIGHT_var() - 2));
SimpleBrick_bricks_var[SimpleBrick_removeBrick_y_var] = (int) (unsetBit((int) (SimpleBrick_bricks_var[SimpleBrick_removeBrick_y_var]
), (int) (SimpleBrick_removeBrick_x_var)));
}
private boolean collideBrick(final int SimpleBrick_collideBrick_xpos_var, final int SimpleBrick_collideBrick_ypos_var) {
int bry_var = (int) ((SimpleBrick_collideBrick_ypos_var - getSimpleBrick_TOP_var() - 20 * getSimpleBrick_SCALE_var()) / (getSimpleBrick_BRICK_HEIGHT_var() * getSimpleBrick_SCALE_var()));

boolean result_var = (boolean) (false);

if(bry_var >= 0 && bry_var < getSimpleBrick_BRICK_ROWS_var()) {
int brx_var = (int) ((SimpleBrick_collideBrick_xpos_var - getSimpleBrick_LEFT_var()) / ((getSimpleBrick_RIGHT_var() - getSimpleBrick_LEFT_var()) / 8));

if(bitIsSet((int) (SimpleBrick_bricks_var[bry_var]
), (int) (brx_var))) {
removeBrick((int) (brx_var), (int) (bry_var));
result_var = (boolean) (true);

}

}
return (boolean) (result_var);
}
}
