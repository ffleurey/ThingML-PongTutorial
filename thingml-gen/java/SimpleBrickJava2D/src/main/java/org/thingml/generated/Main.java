/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;
public class Main {
//Things
public static VelocityController VelocityController_ctrl;
public static TimerJava TimerJava_timer;
public static SimpleBrick SimpleBrick_bb;
public static Java2DDisplay Java2DDisplay_disp;
public static void main(String args[]) {
//Things
VelocityController_ctrl = (VelocityController) new VelocityController("ctrl (VelocityController)", (int) (100), (int) ( -100), (int) (0), (int) ( -100), (int) (0), (int) (0), (int) (100), (int) (4), (int) (0)).buildBehavior(null, null);
TimerJava_timer = (TimerJava) new TimerJava("timer (TimerJava)").buildBehavior(null, null);
final int[] bb_fgcolor_array = new int[3];
final int[] bb_bgcolor_array = new int[3];
final int[] bb_bricks_array = new int[5];
SimpleBrick_bb = (SimpleBrick) new SimpleBrick("bb (SimpleBrick)", (int) (160 * 64 / 6), bb_fgcolor_array, (int) (64), (int) (128 * 64), (int) (160 * 64), (int) (128), (int) (1 * 64), (int) (128 * 64 - 6 * 64), (int) ( -1), (int) (160 * 64 / 2), (int) (128 * 64 + 8 * 64), (int) (3 * 64), (int) (160), (int) (1), (int) (5), (int) ( -1), (int) ( -1), bb_bgcolor_array, (int) (128 * 64), bb_bricks_array, (int) ( -160 * 64 / 65), (int) (160 * 64 / 98), (int) ( -1), (int) (160 * 64 - 1 * 64), (int) (128 * 64 / 2), (int) (14 * 64), (int) (9), (int) (0), (int)0, (int) (3)).buildBehavior(null, null);
Java2DDisplay_disp = (Java2DDisplay) new Java2DDisplay("disp (Java2DDisplay)", (int) (0), (int)0, (int) (5), (int) (0), (int) (0), (int)0, (int) (0), (int) (0), (int) (0)).buildBehavior(null, null);
//Connecting internal ports...
SimpleBrick_bb.getGame_port().addListener(SimpleBrick_bb.getGame_port());
//Connectors
VelocityController_ctrl.getControls_port().addListener(SimpleBrick_bb.getController_port());
TimerJava_timer.getTimer_port().addListener(SimpleBrick_bb.getClock_port());
SimpleBrick_bb.getClock_port().addListener(TimerJava_timer.getTimer_port());
Java2DDisplay_disp.getVctrl_port().addListener(VelocityController_ctrl.getCtrl_in_port());
Java2DDisplay_disp.getDisplay_port().addListener(SimpleBrick_bb.getDisplay_port());
SimpleBrick_bb.getDisplay_port().addListener(Java2DDisplay_disp.getDisplay_port());
TimerJava_timer.getTimer_port().addListener(VelocityController_ctrl.getClock_port());
VelocityController_ctrl.getClock_port().addListener(TimerJava_timer.getTimer_port());
//Init instances (queues, etc)
VelocityController_ctrl.init();
TimerJava_timer.init();
SimpleBrick_bb.init();
Java2DDisplay_disp.init();
//Network components for external connectors
/*$NETWORK$*/
//External Connectors
/*$EXT CONNECTORS$*/
/*$START$*/
Java2DDisplay_disp.start();
TimerJava_timer.start();
VelocityController_ctrl.start();
SimpleBrick_bb.start();
//Hook to stop instances following client/server dependencies (clients firsts)
Runtime.getRuntime().addShutdownHook(new Thread() {
public void run() {
SimpleBrick_bb.stop();
VelocityController_ctrl.stop();
TimerJava_timer.stop();
Java2DDisplay_disp.stop();
/*$STOP$*/
}
});

}
}
