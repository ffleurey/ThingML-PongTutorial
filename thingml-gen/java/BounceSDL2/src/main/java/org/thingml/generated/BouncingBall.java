/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : BouncingBall
 **/
public class BouncingBall extends Component implements IBouncingBall_clock, IBouncingBall_display {

private List<AttributeListener> attListener = new ArrayList<AttributeListener>();
public void addAttributeListener(AttributeListener listener){
this.attListener.add(listener);
}

public void removeAttributeListener(AttributeListener listener){
this.attListener.remove(listener);
}

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
@Override
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tXSIZE = " + BouncingBall_XSIZE_var;
result += "\tYSIZE = " + BouncingBall_YSIZE_var;
result += "\tMAX = " + BouncingBall_MAX_var;
result += "\tbx = " + BouncingBall_bx_var;
result += "\tby = " + BouncingBall_by_var;
result += "\tdx = " + BouncingBall_dx_var;
result += "\tdy = " + BouncingBall_dy_var;
result += "";
return result;
}

private Collection<IBouncingBall_clockClient> clock_clients = Collections.synchronizedCollection(new LinkedList<IBouncingBall_clockClient>());
public synchronized void registerOnClock(IBouncingBall_clockClient client){
clock_clients.add(client);
}

public synchronized void unregisterFromClock(IBouncingBall_clockClient client){
clock_clients.remove(client);
}

private Collection<IBouncingBall_displayClient> display_clients = Collections.synchronizedCollection(new LinkedList<IBouncingBall_displayClient>());
public synchronized void registerOnDisplay(IBouncingBall_displayClient client){
display_clients.add(client);
}

public synchronized void unregisterFromDisplay(IBouncingBall_displayClient client){
display_clients.remove(client);
}

@Override
public synchronized void timer_timeout_via_clock(int TimerMsgs_timer_timeout_id_var){
receive(timer_timeoutType.instantiate(TimerMsgs_timer_timeout_id_var), clock_port);
}

@Override
public synchronized void displayReady_via_display(){
receive(displayReadyType.instantiate(), display_port);
}

@Override
public synchronized void displayError_via_display(){
receive(displayErrorType.instantiate(), display_port);
}

private void sendTimer_start_via_clock(int TimerMsgs_timer_start_id_var, int TimerMsgs_timer_start_time_var){
//ThingML send
clock_port.send(timer_startType.instantiate(TimerMsgs_timer_start_id_var, TimerMsgs_timer_start_time_var));
//send to other clients
for(IBouncingBall_clockClient client : clock_clients){
client.timer_start_from_clock(TimerMsgs_timer_start_id_var, TimerMsgs_timer_start_time_var);
}}

private void sendTimer_cancel_via_clock(int TimerMsgs_timer_cancel_id_var){
//ThingML send
clock_port.send(timer_cancelType.instantiate(TimerMsgs_timer_cancel_id_var));
//send to other clients
for(IBouncingBall_clockClient client : clock_clients){
client.timer_cancel_from_clock(TimerMsgs_timer_cancel_id_var);
}}

private void sendCreate_via_display(int DisplayMsgs_create_xsize_var, int DisplayMsgs_create_ysize_var){
//ThingML send
display_port.send(createType.instantiate(DisplayMsgs_create_xsize_var, DisplayMsgs_create_ysize_var));
//send to other clients
for(IBouncingBall_displayClient client : display_clients){
client.create_from_display(DisplayMsgs_create_xsize_var, DisplayMsgs_create_ysize_var);
}}

private void sendFillRect_via_display(int DisplayMsgs_fillRect_x_var, int DisplayMsgs_fillRect_y_var, int DisplayMsgs_fillRect_width_var, int DisplayMsgs_fillRect_height_var){
//ThingML send
display_port.send(fillRectType.instantiate(DisplayMsgs_fillRect_x_var, DisplayMsgs_fillRect_y_var, DisplayMsgs_fillRect_width_var, DisplayMsgs_fillRect_height_var));
//send to other clients
for(IBouncingBall_displayClient client : display_clients){
client.fillRect_from_display(DisplayMsgs_fillRect_x_var, DisplayMsgs_fillRect_y_var, DisplayMsgs_fillRect_width_var, DisplayMsgs_fillRect_height_var);
}}

private void sendDrawRect_via_display(int DisplayMsgs_drawRect_x_var, int DisplayMsgs_drawRect_y_var, int DisplayMsgs_drawRect_width_var, int DisplayMsgs_drawRect_height_var){
//ThingML send
display_port.send(drawRectType.instantiate(DisplayMsgs_drawRect_x_var, DisplayMsgs_drawRect_y_var, DisplayMsgs_drawRect_width_var, DisplayMsgs_drawRect_height_var));
//send to other clients
for(IBouncingBall_displayClient client : display_clients){
client.drawRect_from_display(DisplayMsgs_drawRect_x_var, DisplayMsgs_drawRect_y_var, DisplayMsgs_drawRect_width_var, DisplayMsgs_drawRect_height_var);
}}

private void sendClear_via_display(){
//ThingML send
display_port.send(clearType.instantiate());
//send to other clients
for(IBouncingBall_displayClient client : display_clients){
client.clear_from_display();
}}

private void sendSetColor_via_display(int DisplayMsgs_setColor_r_var, int DisplayMsgs_setColor_g_var, int DisplayMsgs_setColor_b_var){
//ThingML send
display_port.send(setColorType.instantiate(DisplayMsgs_setColor_r_var, DisplayMsgs_setColor_g_var, DisplayMsgs_setColor_b_var));
//send to other clients
for(IBouncingBall_displayClient client : display_clients){
client.setColor_from_display(DisplayMsgs_setColor_r_var, DisplayMsgs_setColor_g_var, DisplayMsgs_setColor_b_var);
}}

private void sendUpdate_via_display(){
//ThingML send
display_port.send(updateType.instantiate());
//send to other clients
for(IBouncingBall_displayClient client : display_clients){
client.update_from_display();
}}

//Attributes
private final int BouncingBall_MAX_var;
private int BouncingBall_SC_lastX_var;
private final int BouncingBall_YSIZE_var;
private int BouncingBall_dx_var;
private int BouncingBall_by_var;
private int BouncingBall_bx_var;
private final int BouncingBall_XSIZE_var;
private int BouncingBall_SC_lastY_var;
private int BouncingBall_dy_var;
private int debug_BouncingBall_MAX_var;
private int debug_BouncingBall_SC_lastX_var;
private int debug_BouncingBall_YSIZE_var;
private int debug_BouncingBall_dx_var;
private int debug_BouncingBall_by_var;
private int debug_BouncingBall_bx_var;
private int debug_BouncingBall_XSIZE_var;
private int debug_BouncingBall_SC_lastY_var;
private int debug_BouncingBall_dy_var;
//Ports
private Port clock_port;
private Port display_port;
//Message types
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
public Timer_startMessageType getTimer_startType(){
return timer_startType;
}

protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
public Timer_cancelMessageType getTimer_cancelType(){
return timer_cancelType;
}

protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
public Timer_timeoutMessageType getTimer_timeoutType(){
return timer_timeoutType;
}

protected final ClearMessageType clearType = new ClearMessageType();
public ClearMessageType getClearType(){
return clearType;
}

protected final SetColorMessageType setColorType = new SetColorMessageType();
public SetColorMessageType getSetColorType(){
return setColorType;
}

protected final DrawRectMessageType drawRectType = new DrawRectMessageType();
public DrawRectMessageType getDrawRectType(){
return drawRectType;
}

protected final FillRectMessageType fillRectType = new FillRectMessageType();
public FillRectMessageType getFillRectType(){
return fillRectType;
}

protected final CreateMessageType createType = new CreateMessageType();
public CreateMessageType getCreateType(){
return createType;
}

protected final DestroyMessageType destroyType = new DestroyMessageType();
public DestroyMessageType getDestroyType(){
return destroyType;
}

protected final UpdateMessageType updateType = new UpdateMessageType();
public UpdateMessageType getUpdateType(){
return updateType;
}

protected final DisplayReadyMessageType displayReadyType = new DisplayReadyMessageType();
public DisplayReadyMessageType getDisplayReadyType(){
return displayReadyType;
}

protected final DisplayErrorMessageType displayErrorType = new DisplayErrorMessageType();
public DisplayErrorMessageType getDisplayErrorType(){
return displayErrorType;
}

//Empty Constructor
public BouncingBall() {
super();
BouncingBall_MAX_var = (int) 10000;
BouncingBall_SC_lastX_var = (int) 200;
BouncingBall_YSIZE_var = (int) 128;
BouncingBall_dx_var = (int) 200;
BouncingBall_by_var = (int) getBouncingBall_MAX_var() / 2;
BouncingBall_bx_var = (int) getBouncingBall_MAX_var() / 2;
BouncingBall_XSIZE_var = (int) 160;
BouncingBall_SC_lastY_var = (int) 200;
BouncingBall_dy_var = (int) 130;
}

//Constructor (only readonly (final) attributes)
public BouncingBall(final int BouncingBall_MAX_var, final int BouncingBall_YSIZE_var, final int BouncingBall_XSIZE_var) {
super();
this.BouncingBall_MAX_var = BouncingBall_MAX_var;
this.BouncingBall_YSIZE_var = BouncingBall_YSIZE_var;
this.BouncingBall_XSIZE_var = BouncingBall_XSIZE_var;
}

//Constructor (all attributes)
public BouncingBall(String name, final int BouncingBall_MAX_var, final int BouncingBall_SC_lastX_var, final int BouncingBall_YSIZE_var, final int BouncingBall_dx_var, final int BouncingBall_by_var, final int BouncingBall_bx_var, final int BouncingBall_XSIZE_var, final int BouncingBall_SC_lastY_var, final int BouncingBall_dy_var) {
super(name);
this.BouncingBall_MAX_var = BouncingBall_MAX_var;
this.BouncingBall_SC_lastX_var = BouncingBall_SC_lastX_var;
this.BouncingBall_YSIZE_var = BouncingBall_YSIZE_var;
this.BouncingBall_dx_var = BouncingBall_dx_var;
this.BouncingBall_by_var = BouncingBall_by_var;
this.BouncingBall_bx_var = BouncingBall_bx_var;
this.BouncingBall_XSIZE_var = BouncingBall_XSIZE_var;
this.BouncingBall_SC_lastY_var = BouncingBall_SC_lastY_var;
this.BouncingBall_dy_var = BouncingBall_dy_var;
}

//Getters and Setters for non readonly/final attributes
public int getBouncingBall_MAX_var() {
return BouncingBall_MAX_var;
}

public int getBouncingBall_SC_lastX_var() {
return BouncingBall_SC_lastX_var;
}

public void setBouncingBall_SC_lastX_var(int BouncingBall_SC_lastX_var) {
this.BouncingBall_SC_lastX_var = BouncingBall_SC_lastX_var;
}

public int getBouncingBall_YSIZE_var() {
return BouncingBall_YSIZE_var;
}

public int getBouncingBall_dx_var() {
return BouncingBall_dx_var;
}

public void setBouncingBall_dx_var(int BouncingBall_dx_var) {
this.BouncingBall_dx_var = BouncingBall_dx_var;
}

public int getBouncingBall_by_var() {
return BouncingBall_by_var;
}

public void setBouncingBall_by_var(int BouncingBall_by_var) {
this.BouncingBall_by_var = BouncingBall_by_var;
}

public int getBouncingBall_bx_var() {
return BouncingBall_bx_var;
}

public void setBouncingBall_bx_var(int BouncingBall_bx_var) {
this.BouncingBall_bx_var = BouncingBall_bx_var;
}

public int getBouncingBall_XSIZE_var() {
return BouncingBall_XSIZE_var;
}

public int getBouncingBall_SC_lastY_var() {
return BouncingBall_SC_lastY_var;
}

public void setBouncingBall_SC_lastY_var(int BouncingBall_SC_lastY_var) {
this.BouncingBall_SC_lastY_var = BouncingBall_SC_lastY_var;
}

public int getBouncingBall_dy_var() {
return BouncingBall_dy_var;
}

public void setBouncingBall_dy_var(int BouncingBall_dy_var) {
this.BouncingBall_dy_var = BouncingBall_dy_var;
}

//Getters for Ports
public Port getClock_port() {
return clock_port;
}
public Port getDisplay_port() {
return display_port;
}
private CompositeState buildBouncingBall_SC(){
final List<AtomicState> states_BouncingBall_SC = new ArrayList<AtomicState>();
final AtomicState state_BouncingBall_SC_INIT = new AtomicState("INIT")
{
@Override
public void onEntry() {
sendCreate_via_display((int) (getBouncingBall_XSIZE_var()), (int) (getBouncingBall_YSIZE_var()));
}

};
states_BouncingBall_SC.add(state_BouncingBall_SC_INIT);
final AtomicState state_BouncingBall_SC_BOUNCE = new AtomicState("BOUNCE")
{
@Override
public void onEntry() {
sendTimer_start_via_clock((int) (0), (int) (33));
}

};
states_BouncingBall_SC.add(state_BouncingBall_SC_BOUNCE);
final List<Region> regions_BouncingBall_SC = new ArrayList<Region>();
final List<Handler> transitions_BouncingBall_SC = new ArrayList<Handler>();
transitions_BouncingBall_SC.add(new Transition("996913539",displayReadyType, display_port, state_BouncingBall_SC_INIT, state_BouncingBall_SC_BOUNCE){
@Override
public void doExecute(final Event e) {
sendClear_via_display();
sendSetColor_via_display((int) (255), (int) (255), (int) (255));
sendDrawRect_via_display((int) (0), (int) (0), (int) (getBouncingBall_XSIZE_var() - 1), (int) (getBouncingBall_YSIZE_var() - 1));
}

});
transitions_BouncingBall_SC.add(new Transition("522753169",timer_timeoutType, clock_port, state_BouncingBall_SC_BOUNCE, state_BouncingBall_SC_BOUNCE){
@Override
public boolean doCheck(final Event e) {
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == 0;
}

@Override
public void doExecute(final Event e) {
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
BouncingBall_bx_var = (int) (getBouncingBall_bx_var() + getBouncingBall_dx_var());
BouncingBall_by_var = (int) (getBouncingBall_by_var() + getBouncingBall_dy_var());
if(getBouncingBall_bx_var() < 0) {
BouncingBall_dx_var = (int) ( -getBouncingBall_dx_var());
BouncingBall_bx_var = (int) ( -getBouncingBall_bx_var());

} else {
if(getBouncingBall_bx_var() > getBouncingBall_MAX_var()) {
BouncingBall_dx_var = (int) ( -getBouncingBall_dx_var());
BouncingBall_bx_var = (int) (2 * getBouncingBall_MAX_var() - getBouncingBall_bx_var());

}

}
if(getBouncingBall_by_var() < 0) {
BouncingBall_dy_var = (int) ( -getBouncingBall_dy_var());
BouncingBall_by_var = (int) ( -getBouncingBall_by_var());

} else {
if(getBouncingBall_by_var() > getBouncingBall_MAX_var()) {
BouncingBall_dy_var = (int) ( -getBouncingBall_dy_var());
BouncingBall_by_var = (int) (2 * getBouncingBall_MAX_var() - getBouncingBall_by_var());

}

}
int newX_var = (int) (getBallX((int) (getBouncingBall_bx_var())));

int newY_var = (int) (getBallY((int) (getBouncingBall_by_var())));

sendSetColor_via_display((int) (0), (int) (0), (int) (0));
sendFillRect_via_display((int) (getBouncingBall_SC_lastX_var() - 3), (int) (getBouncingBall_SC_lastY_var() - 3), (int) (6), (int) (6));
sendSetColor_via_display((int) (255), (int) (255), (int) (255));
sendFillRect_via_display((int) (newX_var - 2), (int) (newY_var - 3), (int) (4), (int) (6));
sendFillRect_via_display((int) (newX_var - 3), (int) (newY_var - 2), (int) (6), (int) (4));
sendUpdate_via_display();
BouncingBall_SC_lastX_var = (int) (newX_var);
BouncingBall_SC_lastY_var = (int) (newY_var);
}

});
final CompositeState state_BouncingBall_SC = new CompositeState("SC", states_BouncingBall_SC, state_BouncingBall_SC_INIT, transitions_BouncingBall_SC, regions_BouncingBall_SC, false){
private int BouncingBall_SC_lastX_var = 200;
public int getBouncingBall_SC_lastX_var() {
return BouncingBall_SC_lastX_var;
}

public void setBouncingBall_SC_lastX_var(int BouncingBall_SC_lastX_var) {
this.BouncingBall_SC_lastX_var = BouncingBall_SC_lastX_var;
}

private int BouncingBall_SC_lastY_var = 200;
public int getBouncingBall_SC_lastY_var() {
return BouncingBall_SC_lastY_var;
}

public void setBouncingBall_SC_lastY_var(int BouncingBall_SC_lastY_var) {
this.BouncingBall_SC_lastY_var = BouncingBall_SC_lastY_var;
}

}
;
return state_BouncingBall_SC;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
clock_port = new Port(PortType.REQUIRED, "clock", this);
display_port = new Port(PortType.REQUIRED, "display", this);
} else {
clock_port = ((BouncingBall)root).clock_port;
display_port = ((BouncingBall)root).display_port;
}
createCepStreams();if (session == null){
//Init state machine
behavior = buildBouncingBall_SC();
}
return this;
}

private int getBallX(final int BouncingBall_getBallX_bx_var) {
int l_var = (int) (BouncingBall_getBallX_bx_var);

l_var = (int) (l_var * (getBouncingBall_XSIZE_var() - 8));
l_var = (int) (l_var / (getBouncingBall_MAX_var() + 1) + 4);
return (int) (l_var);
}
private int getBallY(final int BouncingBall_getBallY_by_var) {
int l_var = (int) (BouncingBall_getBallY_by_var);

l_var = (int) (l_var * (getBouncingBall_YSIZE_var() - 8));
l_var = (int) (l_var / (getBouncingBall_MAX_var() + 1) + 4);
return (int) (l_var);
}
}
